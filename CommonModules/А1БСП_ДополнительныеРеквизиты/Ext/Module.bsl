#Область ПрограммныйИнтерфейс
#Если НЕ Клиент Тогда
	
	// Возвращает элемент формы, соответствующий переданному имени доп. реквизита.
	// Если элемент формы отсутствует, возвращает Неопределено.
	//
	// Параметры:
	//  Форма						 - ФормаКлиентскогоПриложения - 
	//  ИмяДополнительногоРеквизита	 - Строка - 
	// 
	// Возвращаемое значение:
	//   - ЭлементФормы,Неопределено
	//
	Функция ЭлементФормы(Форма, ИмяДополнительногоРеквизита) Экспорт 
		ИмяЭлементаФормы = ИмяЭлементаФормы(Форма, ИмяДополнительногоРеквизита);
		Если ИмяЭлементаФормы = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		Возврат Форма.Элементы[ИмяЭлементаФормы];	
	КонецФункции
	
	// Возвращает имя элемента формы, соответствующего переданному имени доп. реквизита.
	//
	// Параметры:
	//  Форма						 - ФормаКлиентскогоПриложения - 
	//  ИмяДополнительногоРеквизита	 - Строка - 
	// 
	// Возвращаемое значение:
	//   - ЭлементФормы,Неопределено
	//
	Функция ИмяЭлементаФормы(Форма, ИмяДополнительногоРеквизита) Экспорт
		ОписаниеДопРеквизитов = Форма.Свойства_ОписаниеДополнительныхРеквизитов;
		Строки = ОписаниеДопРеквизитов.НайтиСтроки(А1Э_Структуры.Создать(
		"Свойство", А1Э_ДопРеквизиты.Свойство(ИмяДополнительногоРеквизита),
		));
		Если Строки.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		Возврат Строки[0].ИмяРеквизитаЗначение;	
	КонецФункции 
	
	// Перемещает поле, ответственное за дополнительный реквизит.
	//
	// Параметры:
	//  Форма			 - ФормаКлиентскогоПриложения - 
	//  Имя				 - Строка - имя дополнительного реквизита. 
	//  РодительЭлемента - Строка,ЭлементФормы,ФормаКлиентскогоПриложения - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция Переместить(Форма, Имя, Знач РодительЭлемента, Знач ПередЭлементом = Неопределено) Экспорт
		ЭлементДопРеквизита = ЭлементФормы(Форма, Имя);
		Если ЭлементДопРеквизита = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		Форма.Элементы.Переместить(ЭлементДопРеквизита, А1Э_Формы.ЭлементФормы(Форма, РодительЭлемента), А1Э_Формы.ЭлементФормы(Форма, ПередЭлементом));
	КонецФункции 
	
	// Устанавливает значение поля формы, соответствующего полю в интерфейсе.
	//
	// Параметры:
	//  Форма	 					     - ФормаКлиентскогоПриложения - 
	//  ИмяДополнительногоРеквизита		 - Строка - 
	//  Значение 						 - Произвольный	 - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция УстановитьНаФорме(Форма, ИмяДополнительногоРеквизита, Значение) Экспорт
		Форма[ИмяЭлементаФормы(Форма, ИмяДополнительногоРеквизита)] = Значение;
	КонецФункции
	
	// В схеме компоновки данных заполняет списки значений полей доп. реквизитов и сведений соответствующими значениями.
	// Предназначается для использования при инициализации отчетов.
	//
	// Параметры:
	//  СхемаКомпоновкиДанных	 - СхемаКомпоновкиДанных - 
	//  СтруктураДопРеквизитов	 - Структура<[ИмяПоля]:[ИмяНабораДополнительныхРеквизитов]> - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция УстановитьДоступныеЗначенияПолей(СхемаКомпоновкиДанных, СтруктураДопРеквизитов) Экспорт
		#Если Сервер И НЕ Сервер Тогда
			СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;		
		#КонецЕсли
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Значения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК Значения
		|ГДЕ
		|	Значения.Владелец.Имя = &ИмяДопРеквизита"
		);
		Для Каждого Пара Из СтруктураДопРеквизитов Цикл
			Запрос.УстановитьПараметр("ИмяДопРеквизита", Пара.Значение);
			ДоступныеЗначения = Новый СписокЗначений;
			ДоступныеЗначения.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
				Поле = НаборДанных.Поля.Найти(Пара.Ключ);
				Если Поле = Неопределено Тогда Продолжить; КонецЕсли;
				Поле.УстановитьДоступныеЗначения(ДоступныеЗначения);
			КонецЦикла;
		КонецЦикла;		
	КонецФункции
	
	Функция ДобавитьОписаниеФиксированногоРеквизита(Описания, Имя, Заголовок, ТипЗначения, Наборы) Экспорт
		Если Описания[Имя] <> Неопределено Тогда
			А1Э_Массивы.Добавить(Описания[Имя].Наборы, А1Э_Массивы.Массив(Наборы));
			Возврат Неопределено;
		КонецЕсли;
		
		Описания.Вставить(Имя, А1Э_Структуры.Создать(
		"ЭтоДополнительноеСведение", Ложь,
		"Имя", Имя,
		"Заголовок", Заголовок,
		"ТипЗначения", А1Э_СтандартныеТипы.ОписаниеТиповПолучить(ТипЗначения),
		"Наборы", А1Э_Массивы.Массив(Наборы),
		));	
	КонецФункции
	
	Функция ДобавитьОписаниеФиксированногоСведения(Описания, Имя, Заголовок, ТипЗначения, Наборы) Экспорт
		Если Описания[Имя] <> Неопределено Тогда
			А1Э_Массивы.Добавить(Описания[Имя].Наборы, А1Э_Массивы.Массив(Наборы));
			Возврат Неопределено;
		КонецЕсли;
		
		Описания.Вставить(Имя, А1Э_Структуры.Создать(
		"ЭтоДополнительноеСведение", Истина,
		"Имя", Имя,
		"Заголовок", Заголовок,
		"ТипЗначения", А1Э_СтандартныеТипы.ОписаниеТиповПолучить(ТипЗначения),
		"Наборы", А1Э_Массивы.Массив(Наборы),
		));	
	КонецФункции
	
#КонецЕсли
#КонецОбласти

#Область Механизм

// Механизм предназначен для подключения дополнительных реквизитов (стандартных из БСП) к объектам метаданных, добавленным в расширениях.
//  Для работы механизмы необходимо создать реквизит с именем "<Префикс>_Владелец" (туда будет записано имя метаданных владельца доп. реквизитов).
//	После первого запуска рекомендуется выполнить тестирование и исправление механизмов, которое автоматически создаст нужные наборы.
//	В данной версии для работы характеристик нужно вручную создать реквизит "<Префикс>_Владелец" в табличной части документа и подключить его к характеристикам. 
// 
// Возвращаемое значение:
//   - 
//
Функция НастройкиМеханизма() Экспорт
	Настройки = А1Э_Механизмы.НовыйНастройкиМеханизма();
	
	Настройки.Обработчики.Вставить("А1Э_ПриПоискеОшибок", Истина);
	Настройки.Обработчики.Вставить("А1Э_ПриИсправленииОшибок", Истина);
	
	Настройки.Обработчики.Вставить("ФормаЭлементаПриСозданииНаСервере", Истина);
	Настройки.Обработчики.Вставить("ФормаЭлементаПриЧтенииНаСервере", Истина);
	Настройки.Обработчики.Вставить("ФормаЭлементаОбработкаЗаполненияНаСервере", Истина);
	Настройки.Обработчики.Вставить("ФормаЭлементаПередЗаписьюНаСервере", Истина);
	
	Настройки.Обработчики.Вставить("ФормаЭлементаПриОткрытии", Истина);
	Настройки.Обработчики.Вставить("ФормаЭлементаОбработкаОповещения", Истина);
	
	Настройки.ПорядокВыполнения = 1000;
	
	Возврат Настройки;
КонецФункции

#Если НЕ Клиент Тогда
	
	Функция А1Э_ПриПоискеОшибок(Ошибки) Экспорт
		ТаблицаПрефиксов = ТаблицаОбъектовИПрефиксов();
		
		Префиксы = А1Э_ТаблицыЗначений.РазбитьВТаблицыПоКолонке(ТаблицаПрефиксов, "Префикс");
		Реквизиты = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.Реквизиты;
		ПрефиксыБезРеквизита = Новый Массив;
		Для Каждого Пара Из Префиксы Цикл
			Префикс = Пара.Ключ;
			Если Реквизиты.Найти(Префикс + "_Владелец") = Неопределено Тогда
				А1Э_Механизмы.ДобавитьОписаниеОшибки(Ошибки, "ОтсутствуетРеквизит", , , "Отсутствует реквизит справочника <НаборыДополнительныхРеквизитовИСведений>", , 
				А1Э_Структуры.Создать(
				"Префикс", Префикс,
				));
				ПрефиксыБезРеквизита.Добавить(Префикс);
			КонецЕсли;
		КонецЦикла;
		А1Э_Структуры.УдалитьКлючи(Префиксы, ПрефиксыБезРеквизита);
		
		Для Каждого Пара Из Префиксы Цикл
			Префикс = Пара.Ключ;
			Запрос = Новый Запрос(ТекстЗапросаОтсутствующихНаборов(Префикс));
			Запрос.УстановитьПараметр("ТаблицаПрефикса", Пара.Значение);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.СсылкаНабора) Тогда
					А1Э_Механизмы.ДобавитьОписаниеОшибки(Ошибки, "ОтсутствуетНаборРеквизитов", Выборка.Объект, , "Отсутствует элемент справочника <НаборыДополнительныхРеквизитовИСведений>", Истина, 
					А1Э_Структуры.Создать(
					"Префикс", Префикс,
					"ПредставлениеНабора", Выборка.ПредставлениеНабора,
					"ИмяПредопределенногоНабора", Выборка.ИмяПредопределенногоНабора,
					));
				Иначе
					А1Э_Механизмы.ДобавитьОписаниеОшибки(Ошибки, "НеверныйНаборРеквизитов", Выборка.Объект, Выборка.СсылкаНабора, "Неверные свойства элемента справочника <НаборыДополнительныхРеквизитовИСведений>", Истина, 
					А1Э_Структуры.Создать(
					"Префикс", Префикс,
					"ПредставлениеНабора", Выборка.ПредставлениеНабора,
					"ИмяПредопределенногоНабора", Выборка.ИмяПредопределенногоНабора,
					));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Наборы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы
		|ГДЕ
		|	Наборы.ИмяПредопределенногоНабора = """"
		|	И Наборы.ИмяПредопределенныхДанных <> """"");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			А1Э_Механизмы.ДобавитьОписаниеОшибки(Ошибки, "НеверноеИмяПредопределенногоНабора", "Справочник.НаборыДополнительныхРеквизитовИСведений", Выборка.Ссылка, "Не заполнен реквизит <ИмяПредопределенногоНабора>", Истина);
		КонецЦикла;
	КонецФункции
	
	Функция А1Э_ПриИсправленииОшибок(Ошибки) Экспорт
		Для Каждого Ошибка Из Ошибки Цикл
			Если Ошибка.Имя = "ОтсутствуетНаборРеквизитов" Или Ошибка.Имя = "НеверныйНаборРеквизитов" Тогда
				Если Ошибка.Имя = "ОтсутствуетНаборРеквизитов" Тогда
					НаборРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
					НаборРеквизитов[ИмяРеквизита(Ошибка.Контекст.Префикс)] = Ошибка.ОбъектМетаданных;
				Иначе
					НаборРеквизитов = Ошибка.Ссылка.ПолучитьОбъект();	
				КонецЕсли;
				НаборРеквизитов.Используется = Истина;
				НаборРеквизитов.Наименование = Ошибка.Контекст.ПредставлениеНабора;
				НаборРеквизитов.ИмяПредопределенногоНабора = Ошибка.Контекст.ИмяПредопределенногоНабора;
				НаборРеквизитов.Записать();
			ИначеЕсли Ошибка.Имя = "НеверноеИмяПредопределенногоНабора" Тогда
				Набор = Ошибка.Ссылка.ПолучитьОбъект();
				Набор.ИмяПредопределенногоНабора = Набор.ИмяПредопределенныхДанных;
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции 

	Функция ТаблицаОбъектовИПрефиксов()
		ТаблицаПрефиксов = Новый ТаблицаЗначений;
		ТаблицаПрефиксов.Колонки.Добавить("Префикс", А1Э_Строки.ОписаниеТипа(100));
		ТаблицаПрефиксов.Колонки.Добавить("Объект", А1Э_Строки.ОписаниеТипа(100));
		ТаблицаПрефиксов.Колонки.Добавить("ПредставлениеНабора", А1Э_Строки.ОписаниеТипа(100));
		ТаблицаПрефиксов.Колонки.Добавить("ИмяПредопределенногоНабора", А1Э_Строки.ОписаниеТипа(100));
		
		ОбъектыМеханизма = А1Э_Механизмы.ОбъектыМеханизма("А1БСП_ДополнительныеРеквизиты");
		Для Каждого Пара Из ОбъектыМеханизма Цикл
			Объект = Пара.Ключ;
			ОбъектМетаданных = А1Э_Метаданные.ОбъектМетаданных(Объект);
			Контекст = Пара.Значение;
			Строка = ТаблицаПрефиксов.Добавить();
			Строка.Объект = Объект;
			Строка.Префикс = Префикс(ОбъектМетаданных);
			
			Строка.ПредставлениеНабора = А1Э_Структуры.ЗначениеСвойства(Контекст, "ПредставлениеНабора");
			Если НЕ ЗначениеЗаполнено(Строка.ПредставлениеНабора) Тогда
				Строка.ПредставлениеНабора = А1Э_Метаданные.ПредставлениеНескольких(ОбъектМетаданных);
			КонецЕсли;
			Строка.ИмяПредопределенногоНабора = А1Э_Структуры.ЗначениеСвойства(Контекст, "ИмяПредопределенногоНабора");
			Если НЕ ЗначениеЗаполнено(Строка.ИмяПредопределенногоНабора) Тогда
				Строка.ИмяПредопределенногоНабора = СтрЗаменить(Объект, ".", "_");
			КонецЕсли;
		КонецЦикла;
		Возврат ТаблицаПрефиксов;
	КонецФункции
	
	Функция ФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") Тогда Возврат Неопределено КонецЕсли;
		
		Контекст = А1Э_Механизмы.КонтекстМеханизма(Форма, "А1БСП_ДополнительныеРеквизиты");
		
		УправлениеСвойствами.ПриСозданииНаСервере(Форма, А1Э_Структуры.Создать(
		"ИмяЭлементаДляРазмещения", А1Э_Общее.ЗначениеСвойства(Контекст, "ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты"),
		));
	КонецФункции
	
	Функция ФормаЭлементаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт 
		Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") Тогда Возврат Неопределено КонецЕсли;
		
		Контекст = А1Э_Механизмы.КонтекстМеханизма(Форма, "А1БСП_ДополнительныеРеквизиты");
		Если НЕ А1Э_Структуры.Свойство(Контекст, "ИмяЭлементаДляРазмещения") Тогда Возврат Неопределено; КонецЕсли;
		
		УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецФункции
	
	Функция ФормаЭлементаОбработкаЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
		Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") Тогда Возврат Неопределено КонецЕсли;
		
		Контекст = А1Э_Механизмы.КонтекстМеханизма(Форма, "А1БСП_ДополнительныеРеквизиты");
		Если НЕ А1Э_Структуры.Свойство(Контекст, "ИмяЭлементаДляРазмещения") Тогда Возврат Неопределено; КонецЕсли;
		
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	КонецФункции
	
	Функция ФормаЭлементаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
		Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") Тогда Возврат Неопределено КонецЕсли;
		
		Контекст = А1Э_Механизмы.КонтекстМеханизма(Форма, "А1БСП_ДополнительныеРеквизиты");
		Если НЕ А1Э_Структуры.Свойство(Контекст, "ИмяЭлементаДляРазмещения") Тогда Возврат Неопределено; КонецЕсли;
		
		УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	КонецФункции 
	
	Функция ФормаЭлементаОбработкаОповещенияСервер(Форма, ИмяСобытия, Параметр, Источник) Экспорт
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(Форма);
	КонецФункции 
	
	Функция ТекстЗапросаОтсутствующихНаборов(Префикс) Экспорт
		Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПрефикса.Объект КАК Объект,
		|	ТаблицаПрефикса.ПредставлениеНабора КАК ПредставлениеНабора,
		|	ТаблицаПрефикса.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора
		|ПОМЕСТИТЬ ТаблицаПрефикса
		|ИЗ
		|	&ТаблицаПрефикса КАК ТаблицаПрефикса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПрефикса.Объект КАК Объект,
		|	ТаблицаПрефикса.ПредставлениеНабора КАК ПредставлениеНабора,
		|	Наборы.Ссылка КАК СсылкаНабора,
		|	Наборы.Наименование КАК НаименованиеНабора,
		|	ТаблицаПрефикса.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора
		|ИЗ
		|	ТаблицаПрефикса КАК ТаблицаПрефикса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы
		|		ПО (ТаблицаПрефикса.Объект = &Наборы_РеквизитВладелец)
		|			И (Наборы.Используется)
		|ГДЕ
		|	(Наборы.Ссылка ЕСТЬ NULL
		|			ИЛИ ТаблицаПрефикса.ПредставлениеНабора <> Наборы.Наименование
		|			ИЛИ ТаблицаПрефикса.ИмяПредопределенногоНабора <> Наборы.ИмяПредопределенногоНабора)";
		А1Э_Строки.Подставить(Текст, "&Наборы_РеквизитВладелец", "Наборы." + ИмяРеквизита(Префикс));
		Возврат Текст;
	КонецФункции 
	
#КонецЕсли
#Если Клиент Тогда
	
	Функция ФормаЭлементаПриОткрытии(Форма, Отказ) Экспорт
		Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") Тогда Возврат Неопределено КонецЕсли;
		
		Контекст = А1Э_Механизмы.КонтекстМеханизма(Форма, "А1БСП_ДополнительныеРеквизиты");
		Если НЕ А1Э_Структуры.Свойство(Контекст, "ИмяЭлементаДляРазмещения") Тогда Возврат Неопределено; КонецЕсли;
		
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(Форма);
	КонецФункции
	
	Функция ФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(Форма, ИмяСобытия, Параметр) Тогда
			А1Э_Механизмы.ЗапланироватьСерверныйОбработчик(Форма, ИмяМодуля() + ".ФормаЭлементаОбработкаОповещенияСервер")
		КонецЕсли;
	КонецФункции 
	
	Функция Подключаемый_СвойстваВыполнитьКоманду(Форма, ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено) Экспорт
		УправлениеСвойствамиКлиент.ВыполнитьКоманду(Форма, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецФункции
	
	Функция Подключаемый_ПриИзмененииДополнительногоРеквизита(Форма, Элемент) Экспорт
		УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(Форма);
	КонецФункции
	
#КонецЕсли

#КонецОбласти 

#Область МеханизмФиксированных 
//Этот механизм позволяет организовать проверку существования дополнительных реквизитов, которые используются в коде и должны существовать в базе данных.

Функция Фиксированные__НастройкиМеханизма() Экспорт
	Настройки = А1Э_Механизмы.НовыйНастройкиМеханизма();
	
	Настройки.Обработчики.Вставить("ПередНачаломРаботыСистемыВызовСервера", Истина);
	
	Возврат Настройки;
КонецФункции

#Если НЕ Клиент Тогда
	
	Функция Фиксированные__ПередНачаломРаботыСистемыВызовСервера(Отказ, ДанныеСервера) Экспорт 
		Если НЕ РольДоступна("ПолныеПрава") Тогда Возврат Неопределено; КонецЕсли;
		
		ОписанияРеквизитов = Новый Соответствие;
		А1Э_Механизмы.ВыполнитьМеханизмыОбработчика("А1БСП_ПриОпределенииФиксированныхДополнительныхРеквизитов", ОписанияРеквизитов);
		Если ОписанияРеквизитов.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		МассивИмен = Новый Массив;
		ТаблицаНаборов = Новый ТаблицаЗначений;
		ТаблицаНаборов.Колонки.Добавить("ЭтоДополнительноеСведение", Новый ОписаниеТипов("Булево"));
		ТаблицаНаборов.Колонки.Добавить("ИмяСвойства", А1Э_Строки.ОписаниеТипа(100));
		ТаблицаНаборов.Колонки.Добавить("ИмяНабора", А1Э_Строки.ОписаниеТипа(100));
		Для Каждого Пара Из ОписанияРеквизитов Цикл
			МассивИмен.Добавить(Пара.Ключ);
			Для Каждого ИмяНабора Из Пара.Значение.Наборы Цикл
				А1Э_ТаблицыЗначений.ДобавитьСтроку(ТаблицаНаборов, А1Э_Структуры.Создать(
				"ЭтоДополнительноеСведение", Пара.Значение.ЭтоДополнительноеСведение,
				"ИмяСвойства", Пара.Ключ,
				"ИмяНабора", ИмяНабора,
				));		
			КонецЦикла;
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = Фиксированные__ТекстЗапроса();
		Запрос.УстановитьПараметр("МассивИмен", МассивИмен);
		Запрос.УстановитьПараметр("ТаблицаНаборов", ТаблицаНаборов);
		Результат = Запрос.ВыполнитьПакет();
		ТаблицаДополнительныхРеквизитов = А1Э_Массивы.ЭлементСКонца(Результат, 1).Выгрузить();
		НачатьТранзакцию();
		Сообщения = Новый Массив;
		Для Каждого Пара Из ОписанияРеквизитов Цикл
			ОписаниеРеквизита = Пара.Значение;
			Строки = ТаблицаДополнительныхРеквизитов.НайтиСтроки(А1Э_Структуры.Создать(
			"Имя", Пара.Значение.Имя,
			));
			Если Строки.Количество() = 0 Тогда
				ДопРеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			Иначе
				Строка = Строки[0];
				ОписаниеРеквизита.Вставить("Ссылка", Строка.Ссылка);
				Если Строка.Наименование = ОписаниеРеквизита.Заголовок 
					И Строка.Заголовок = ОписаниеРеквизита.Заголовок 
					И Строка.ТипЗначения = ОписаниеРеквизита.ТипЗначения
					Тогда Продолжить; КонецЕсли;
				ДопРеквизитОбъект = Строка.Ссылка.ПолучитьОбъект();	
			КонецЕсли;
			ДопРеквизитОбъект.Наименование = ОписаниеРеквизита.Заголовок;
			ДопРеквизитОбъект.Заголовок = ОписаниеРеквизита.Заголовок;
			ДопРеквизитОбъект.ТипЗначения = ОписаниеРеквизита.ТипЗначения;
			ДопРеквизитОбъект.ЭтоДополнительноеСведение = ОписаниеРеквизита.ЭтоДополнительноеСведение; 
			ДопРеквизитОбъект.Имя = ОписаниеРеквизита.Имя;
			ДопРеквизитОбъект.Записать();
			ОписаниеРеквизита.Вставить("Ссылка", ДопРеквизитОбъект.Ссылка);
			Если Строки.Количество() = 0 Тогда
				Сообщения.Добавить("Создано фиксированное свойство <" + ОписаниеРеквизита.Имя + ">!");
			Иначе
				Сообщения.Добавить("Обновлено фиксированное свойство <" + ОписаниеРеквизита.Имя + ">!");
			КонецЕсли;
			
		КонецЦикла;
		ВыборкаИмяНабора = А1Э_Массивы.Последний(Результат).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИмяНабора.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаИмяНабора.Набор) Тогда
				Сообщить("Не обнаружен набор свойств с предопределенным именем <" + ВыборкаИмяНабора.ИмяНабора + ">!");
				Продолжить;
			КонецЕсли;
			НаборОбъект = ВыборкаИмяНабора.Набор.ПолучитьОбъект();
			ВыборкаЭтоДополнительноеСведение = ВыборкаИмяНабора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЭтоДополнительноеСведение.Следующий() Цикл
				ТабличнаяЧасть = ?(ВыборкаЭтоДополнительноеСведение.ЭтоДополнительноеСведение, НаборОбъект.ДополнительныеСведения, НаборОбъект.ДополнительныеРеквизиты);  
				Выборка = ВыборкаЭтоДополнительноеСведение.Выбрать();
				Пока Выборка.Следующий() Цикл
					А1Э_ТаблицыЗначений.ДобавитьСтроку(ТабличнаяЧасть, А1Э_Структуры.Создать(
					"Свойство", ОписанияРеквизитов[Выборка.ИмяСвойства].Ссылка,
					));
				КонецЦикла;
			КонецЦикла;
			НаборОбъект.Записать();
			Сообщения.Добавить("Обновлен набор дополнительных реквизитов и сведений <" + ВыборкаИмяНабора.ИмяНабора + ">!"); 
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		А1Э_Сообщения.СообщитьМассив(Сообщения);
	КонецФункции
	
	Функция Фиксированные__ТекстЗапроса()
		Возврат
		"ВЫБРАТЬ
		|	ТаблицаНаборов.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
		|	ТаблицаНаборов.ИмяСвойства КАК ИмяСвойства,
		|	ТаблицаНаборов.ИмяНабора КАК ИмяНабора
		|ПОМЕСТИТЬ ТаблицаНаборов
		|ИЗ
		|	&ТаблицаНаборов КАК ТаблицаНаборов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопРеквизиты.Ссылка КАК Ссылка,
		|	ДопРеквизиты.Наименование КАК Наименование,
		|	ДопРеквизиты.Заголовок КАК Заголовок,
		|	ДопРеквизиты.Имя КАК Имя,
		|	ДопРеквизиты.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДопРеквизиты
		|ГДЕ
		|	ДопРеквизиты.Имя В(&МассивИмен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНаборов.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
		|	ТаблицаНаборов.ИмяСвойства КАК ИмяСвойства,
		|	ТаблицаНаборов.ИмяНабора КАК ИмяНабора,
		|	Наборы.Ссылка КАК Набор,
		|	ВЫБОР
		|		КОГДА ТаблицаНаборов.ЭтоДополнительноеСведение
		|			ТОГДА ДопСведения.Ссылка
		|		ИНАЧЕ ДопРеквизиты.Ссылка
		|	КОНЕЦ КАК ДопРеквизитСведение
		|ИЗ
		|	ТаблицаНаборов КАК ТаблицаНаборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Наборы.ИмяПредопределенногоНабора КАК Имя,
		|			МАКСИМУМ(Наборы.Ссылка) КАК Ссылка
		|		ИЗ
		|			Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Наборы.ИмяПредопределенногоНабора) КАК Наборы
		|		ПО ТаблицаНаборов.ИмяНабора = Наборы.Имя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
		|		ПО ТаблицаНаборов.ИмяСвойства = ДопРеквизиты.Свойство.Имя
		|			И (Наборы.Ссылка = ДопРеквизиты.Ссылка)
		|			И (НЕ ТаблицаНаборов.ЭтоДополнительноеСведение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДопСведения
		|		ПО ТаблицаНаборов.ИмяСвойства = ДопСведения.Свойство.Имя
		|			И (Наборы.Ссылка = ДопСведения.Ссылка)
		|			И (НЕ ТаблицаНаборов.ЭтоДополнительноеСведение)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаНаборов.ЭтоДополнительноеСведение
		|				ТОГДА ДопСведения.Ссылка
		|			ИНАЧЕ ДопРеквизиты.Ссылка
		|		КОНЕЦ ЕСТЬ NULL
		|ИТОГИ
		|	МАКСИМУМ(Набор)
		|ПО
		|	ИмяНабора,
		|	ЭтоДополнительноеСведение";
	КонецФункции
	
#КонецЕсли

#КонецОбласти

#Область Общее
#Если НЕ Клиент Тогда
	// Возвращает префикс, используемый механизмом дополнительных реквизитов.
	//
	// Параметры:
	//  Объект	 - 	 - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция Префикс(ОбъектМетаданных) Экспорт
		Если НЕ А1Э_Механизмы.Подключен(ОбъектМетаданных, ИмяМодуля()) Тогда Возврат Неопределено; КонецЕсли;
		Контекст = А1Э_Механизмы.КонтекстМеханизма(ОбъектМетаданных, ИмяМодуля());
		
		Префикс = А1Э_Структуры.ЗначениеСвойства(Контекст, "Префикс");
		Если НЕ ЗначениеЗаполнено(Префикс) Тогда 
			Префикс = А1Э_Строки.Перед(ОбъектМетаданных.Имя, "_"); 
		КонецЕсли;
		Возврат Префикс;
	КонецФункции 
	
#КонецЕсли
#КонецОбласти

Функция ИмяРеквизита(Префикс) Экспорт
	Возврат Префикс + "_Владелец";	
КонецФункции

Функция ИмяМодуля() Экспорт
	Возврат "А1БСП_ДополнительныеРеквизиты";
КонецФункции 